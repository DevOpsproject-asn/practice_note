kubernates example manifest file 
-------------------------------
apiVersion: apps/v1
kind: Deployment
metadata: 
  name: springbootapp
  namespace: test-ns
spec:
  replicas: 4
  selector: 
    matchLabels:
	   app: javawebapp
  strategy: 
    type: RollingUpdate
	rollingUpdate:
	  maxSurge: 1
	  maxUnavailable: 1
	minReadySeconds: 30
	template:
	  metadata:
	    labels:
		  app: mavenwebapp
	  spec:
	    containers:
		- name: mavenwebappimage
		  image: cloudweocker123456/mavenwebapp:v34
		  ports:
		  - containerPort: 8080
		  resources:
		    requests: 
			  cpu: "1"
			  memory: "500Mi"
			limits: 
			  cpu: "2"
			  memory: "1Gi"
		  readinessProbe:
		    httpGet:
			  path:/java
			  port: 8080
			initialDelaySeconds: 30
			periodSeconds: 10
			timeOutSeconds: 5
		  livenessProbe: 30
		    httpGet: 
			  path: /java
			  port: 8080
			initialDelaySeconds: 30
			periodSeconds: 10
			timeOutSeconds: 5
---
apiVersion: v1
kind: Service
metadata: 
  name: javawebappsvc
  namespace: test-ns
spec: 
  type: NodePort/LoadBalancer/ClusterIP
  selector: 
    app: javawebapp
  ports:
  - port: 80
    targetPort: 8080
	nodePort: 32003
    protocal: tcp
-----------------------------
IngressRule
------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metada: 
  name: javawebappingressrule
  namespace: test-ns
spec:
  ingressClassname: nginx
  rules: 
  - host: javawebapp.mithuntechdevops.co.in
    http: 
	  paths:
	  - pathType: Prefix
	    path: "/"
		backend: 
		  service:
		    name: javawebappsvc
			port:
			  number: 80
  - host: springboot.mithuntechdevops.co.in
    http:
	  paths:
	  - pathType: Prefix
	    path: "/"
		backend: 
		   service: 
		     name: springbootsvc
			 port:
			   number: 8090
-----------------------------------

			
  
  
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata: 
  name: javawebappingressrule
  namespace: test-ns
spec:
  ingressClassName: nginx
  rules:
  - host: javawebapp.mithuntechdevops.co.in
    http:
	  paths:
	  - pathType: Prefix
	    path: "/"
		backend:
		  service:
		    name: javawebappsvc
			port:
			  number: 80
  - host: springboot.mithuntechdevops.co.in
    http: 
	  paths:
	  - pathType: Prefix
	    path: "/"
		backend: 
		  service:
		     name: springbootsvc
			 port:
			   number: 8080
	
			    
		    
		  
apiVersion: apps/v1
kind: Deployment 
metatada: 
  name: springbootapp
  namespace: test-ns
spec:
  replicas: 4
  selector:
    matchLabels:
	  app: javawebapp
  strategy:
    type: RollingUpdate   / ReCreate
	rollingUpdate:
	   maxSurge: 1
	   maxUnavailable: 1
	minReadySeconds: 30
	template:
	  metadata:
	    lables:
		  app: javawebapp
	  spec:
	    NodeSelector:
		  Name: nodeOne
	    containers:
		- name: springbootimage
		  image: cloudocker123456/springboot:5
		  ports:
		  - containerPort: 8080
		  resouces:
		    requests:
			  cpu: "500m"
			  memory: "500Mi"
			limits: 
			  cpu: "750m"
			  memory: "750Mi"
		  livenessProbe:
		    httpGet:
			  path: /javawebapp
			  port: 8080
			initialDelaySeconds: 30
			periodSeconds: 10
			timeOutSeconds: 5
		  readynessProbe:
		    httpGet:
			  path: /javawebapp
			  port: 8080
			initialDelaySeconds: 30
			periodSeconds: 10
			timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata: 
  name: springbootsvc
  namespace: test-ns
spec:
  type: ClusterIP/NodePort/LoadBalancer/  #ClusterIP: None ( headless service)
  selector:
   app: javawebapp
  ports:
  - port: 80
    targetPort: 8080
	nodePort: 32001 ( 30000 to 32676)
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata: 
  name: javawebappingressrule
  namespace: test-ns
spec:
  ingressClassName: nginx
  rules:
  - host: javawebapp.mithuntechdevops.co.in
    http:
	  paths:
	  - pathType: Prefix
	    path: "/"
		backend:
		  service:
		    name: javawebappsvc
			port:
			  number: 80
  - host: springboot.mithuntechdevops.co.in
    http: 
	  paths:
	  - pathType: Prefix
	    path: "/"
		backend: 
		  service:
		     name: springbootsvc
			 port:
			   number: 8080

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: javaweabppingressrule
  namespace: test-ns
spec:
  ingressClassName: nginx
  rules:
  - host: javawebapp.mithuntechdevops.co.in
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: javawebappsvc
            port:
              number: 80

	
  
  

		  
			


apiVersion: apps/v1
kind: Deployment
metadata:
  name: javawebappdeployment
  namespace: test-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: javawebapp
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  minReadySeconds: 30
  template:
    metadata:
      name: javawebapppod
      labels:
        app: javawebapp
    spec:
      containers:
      - name: javawebappcontainer
        image: dockerhandson/java-web-app:4
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: /java-web-app
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /java-web-app
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 500m
            memory: 256Mi
          limits:
            cpu: 1
            memory: 512Mi