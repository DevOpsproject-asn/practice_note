kubernates practice
------------------------
namespace: It's logical isolatates inside k8s cluster. Isolation, permission, performace, Resouce control
---------
apiVersion: v1
kind: Namespace
metadata:
  name: test-ns
  labels:
    name: test

kubectl apply -f test-ns 
kubectl get namespace
kubectl describe <namespace> 

CLI to create namespace :  kubectl create namespace test-ns
-------------------------------
Pod:
---

apiVersion: v1
kind: Pod
metadata: 
  name: nginx-pod
  labels:
    name: ngnix
  namespace: test-ns
spec:
  containers:
  - name: nginx-containers
    image: cloudocker123456/ngnix-app
    ports:
    - containerPort: 80
kubeclt apply -f ngnixpod.yaml 
kubectl get all
kubectl get pod -o wide -ns test-ns
kubectl describe pod <name> -ns test-ns

Pod model is two type : one container per pod & multiple container pod or sidecar containers 

--------------------------------------
Static Pod: static pod doesn't controlled by API serber k8s manager , it's managed by kubelet. it's use case monitoring agent wants to install and check the container helath check.
------------
mkdir -p /etc/kubernetes/manifests/
vi static-web-hosting.yaml

apiVersion: v1
kind: Pod
metadata:
  name: static-pod
  labels:
    role: myrole
spec:
  containers:
  - name: web
    image: nginx
	ports:
	- containerPort: 80
	  name: web-port
	  protocal: TCP
	  
KUBELET_ARGS="--cluster-dns=10.254.0.10 --cluster-domain=kube.local --pod-manifest-path=/etc/kubernetes/manifests/"
systemctl restart kubelet

# Run this command on the node where the kubelet is running
crictl ps
kubectl get pods

remove the file by using command .
rm -rf static-web-hosting.yaml

---------------------
Label & selector:
Label : one thing find anotherthing in k8s ,by using labels.
selector : it's like filter , selector uses the label to find colltection of objects  matched with same value.
 Service 
 ---------
 ClusterIP
 NodePort
 Load Balancer
 
 ClusterIP with ReplicationController
 ----------
apiVersion: v1
kind: ReplicationController
metadata:
  name: RCpod
  namespace: test-ns
spec:
  replicas: 2
  selector: 
    app: webapp
  template:
    metadata:
	  name: webapp
	  labels:
	    app: webapp
	spec:
	  containers:
	  - name: nginxcontainer
	    image: cloudocker123456/ngnix-app
		ports:
		- containerPort: 80
---
apiVersion: v1
kind: Service
metadata: 
  name: RCpodsvc
  namespace: test-ns
spec:
  type: ClusterIP
  slector:
    app: webapp
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: v1
kind: Service
metadata: 
  name: RCpodsvc
  namespace: test-ns
spec:
  type: NodePort
  selector: 
    app: webapp
	app: appserver
  ports:
  - port: 80
	targetPort: 80
	protocal: TCP
	nodePort: 30036
---------------------










    
	   




















  