kubernate
---------
to create Pod :
---------------
apiVersion: v1
kind: Pod
metadata:
  name: httpdpod
spec:
  containers:
  - name: httpd
    image: httpd
    ports:
    - containerPort: 80
---
apiVersion: v1
kind: Pod
metadata:
   name: nginxpod

spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80

to create namespace:
-----------------------
apiVersion: v1
kind: Namespace
metadata:
  name: dev-ns
  labels:
    name: dev
---
apiVersion: v1
kind: Namespace

metadata:
   name: test-ns
   labels:
     team: testing
------------------------
ReplicationController
--------------
apiVersion: v1
kind: ReplicationController
metadata:
  name: maven-rc
  namespace: test-ns
spec:
  
  
spec:
  containers:
  - name: nginx
    image: 
	
apiVersion: v1
kind: ReplicationController
metadata:
   name: javawebappk8s
   namespace: test-ns
spec:
  selector:
    app: webappk8s
  template:
    metadata:
      labels:
        app: webappk8s
    spec:
      containers:
      - name: mavenwebappk8s
        image: cloudocker123456/java-web-app-k8s:7
        ports:
        - containerPort: 80
          name: appport
---
apiVersion: v1
kind: Service
metadata:
  name: javawebappk8ssvc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: webappk8s
  ports:
  - port: 80
    targetPort: appport


-------------------------------
rs-ReplicaSet
---------
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: java-web-app
  namespace: test-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: java-web-app2
  template:
    metadata:
      labels:
        app: java-web-app2
    spec:
       containers:
       - name: java-web-app-k8s
         image: cloudocker123456/java-web-app-docker:9
         ports:
         - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: java-web-app3svc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: java-web-app2
  ports:
  - port: 80

--------------------------------------------------------
DS- Deployment Recreate
----------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  namespace: test-ns
spec:
  revisionHistoryLimit: 2
  replicas: 2
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
         app: webapp
    spec:
      containers:
      - name: webappcontainer
        image: cloudocker123456/java-web-app-docker:9
        ports:
        - containerPort: 8080
          name: appport
---
apiVersion: v1
kind: Service
metadata:
  name: webappsvc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: webapp
  ports:
  - port: 80
    targetPort: appport
----------------------------------------------------------
hpadeployment
----------
apiVersion: apps/v1
kind: Deployment
metadata:
 name: hpadeployment
 labels:
  name: hpadeployment
spec:
  replicas: 2
  selector:
   matchLabels:
     name: hpapod
  template:
    metadata:
     labels:
       name: hpapod
    spec:
      containers:
      - name: hpacontainer
        image: k8s.gcr.io/hpa-example
        ports:
        - name: http
          containerPort: 80
        resources:
          requests:
           cpu: "100m"
           memory: "64Mi"
          limits:
           cpu: "100m"
           memory: "256Mi"
---
apiVersion: v1
kind: Service
metadata:
 name: hpaclusterservice
 labels:
 name: hpaservice
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    name: hpapod
  type: NodePort

---------------------------------
mongo db 
-------
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongo
  namespace: test-ns
spec:
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongocontainer
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: Avinna
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: Avinna@123
---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
  - port: 8080
    targetPort: 27017
------------------------------------------------------
deployment-rollingupdate
------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  namespace: test-ns
spec:
  revisionHistoryLimit: 5
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  minReadySeconds: 30
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webappcontainer
        image: cloudocker123456/java-web-app-docker:9
        ports:
        - containerPort: 8080
          name: appport
---
apiVersion: v1
kind: Service
metadata:
  name: webappsvc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: webapp
  ports:
  - port: 80
    targetPort: appport
------------------------------
apiVersion: v1
kind: Deployment
metadata:
 name: app-server
 namespace: test-ns
spec:
  replicas: 2
  selector:
    app: nginx-server
  template:
    metadata:
      lables:
        app: nginx
      		
	  
-----------------------------------------------------
springmongo.yaml
----------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springboot
  namespace: test-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: spring
  template:
    metadata:
      labels:
        app: spring
    spec:
      containers:
      - name: springcontainer
        image: cloudocker123456/spring-boot-mongo-k8s:17
        ports:
        - containerPort: 8080
        resources:
           requests:
             cpu: "300m"
             memory: "256Mi"
           limits:
             cpu: "500m"
             memory: "500Mi"
        env:
        - name: MONGO_DB_HOSTNAME
          value: mongosvc
        - name: MONGO_DB_USERNAME
          value: devdb
        - name: MONGO_DB_PASSWORD
          value: devdb@123
---
apiVersion: v1
kind: Service
metadata:
   name: springsvc
   namespace: test-ns
spec:
  type: NodePort
  selector:
    app: spring
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongo
  namespace: test-ns
spec:
  selector:
    matchLabels:
       app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongocontainer
        image: mongo
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: devdb
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: devdb@123
---
apiVersion: v1
kind: Service
metadata:
  name: mongosvc
  namespace: test-ns
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
  - port: 8080
    targetPort: 27017

--------------------------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv0003
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: slow
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /tmp
    server: 172.17.0.2
----------------------------
practice
-------------
apiVersion: v1
kind: PersistentVolume
metadata: 
   name: pv0003
spec:
  capacity: 
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: slow
  mountOptions:
    - hard
	- nfservers=4.1
  nfs:
    path: /tmp
	server: 172.17.0.2
-----------
apiVersion: v1
kind: Pod
metadata: 
   name: nginxpod
spec:
  containers:
  - name: nginxcontainer
    image: nginx
	Ports:
	- name: appport
	  containerPort: 8080
	 
apiVersion: v1
kind: Pod
metadata:
  name: httpdpod
spec:
  containers:
  - name: httpd
    image: httpd
    ports:
    - containerPort: 80
-------------
apiVersion: v1
kind: Namespace
metadata:
  name: dev-ns
  labels:
    name: dev
	
apiVersion: v1
kind: Namespace
metadata:
  name: dev-ns
  labels:
    name: dev
----------------
apiVersion: v1
kind: ReplicationController
metadata: 
   name: RCpod
   namespace: dev-ns
spec:
  replicas: 2
  selector: 
    app: webapp
  template:
    metadata:
	  labels:
	     app: webapp
	sepc:
	  containers:
	  - name: mavencontainer
	    image: cloudocker123456/java-web-app-docker
		ports:
		- name: appport
		  containerPort: 80
---
apiVersion: v1
kind: Service
metadata: 
  name: webappsvc
  namespace: dev-ts
spec:
  type: NodePort
  selector:
    app: webapp
  ports:
  - port: 80
    targetPort: appport
   
   

apiVersion: v1
kind: ReplicationController
metadata:
   name: javawebappk8s
   namespace: test-ns
spec:
  selector:
    app: webappk8s
  template:
    metadata:
      labels:
        app: webappk8s
    spec:
      containers:
      - name: mavenwebappk8s
        image: cloudocker123456/java-web-app-k8s:7
        ports:
        - containerPort: 80
          name: appport
---
apiVersion: v1
kind: Service
metadata:
  name: javawebappk8ssvc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: webappk8s
  ports:
  - port: 80
    targetPort: appport
----------------------------------------------------------------
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: rspod
  namespace: dev-ns
sepc:
  replicas: 2
  selector:
    matchlabels:
	  app: webapp
	matchExpressions
    - key: env
      operator: In
      values:
      - dev
  template:
    metadata:
	  lables:
	    app: webapp
		env: dev
	spec:
	  containers:
	  - name: mavencontainer
	    image: cloudocker123456/java-web-app-docker
		Ports:
		- name: appport
		  containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: rspodsvc
  namespace: dev-ns
spec:
  type: NodePort
  selector:
    app: webapp
  ports:
  - port: 80
    targetPort: appport
--------------------------------------
  
    
  
  
  rs-ReplicaSet
---------
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: java-web-app
  namespace: test-ns
spec:
  replicas: 2
  selector:
    matchLabels:
      app: java-web-app2
  template:
    metadata:
      labels:
        app: java-web-app2
    spec:
       containers:
       - name: java-web-app-k8s
         image: cloudocker123456/java-web-app-docker:9
         ports:
         - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: java-web-app3svc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: java-web-app2
  ports:
  - port: 80
------------------------------------------------
Deployment:
--------------------------






DS- Deployment Recreate
----------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp
  namespace: test-ns
spec:
  revisionHistoryLimit: 2
  replicas: 2
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
         app: webapp
    spec:
      containers:
      - name: webappcontainer
        image: cloudocker123456/java-web-app-docker:9
        ports:
        - containerPort: 8080
          name: appport
---
apiVersion: v1
kind: Service
metadata:
  name: webappsvc
  namespace: test-ns
spec:
  type: NodePort
  selector:
    app: webapp
  ports:
  - port: 80
    targetPort: appport