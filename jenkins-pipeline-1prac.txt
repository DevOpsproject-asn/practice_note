Jenkins pipeline
-------------------
node {
    stage('SCM code checkout'){
        git credentialsId: 'github', url: 'https://github.com/cloudtechnoli/java-web-app-docker.git'
    }
    stage('maven build'){
        def mavenHome = tool name: "Maven3.9.0", type: "maven"
        def mavenCMD = "${mavenHome}/bin/mvn "
        sh "${mavenCMD} clean package"
     }
    stage('docker image create'){
        sh "docker build -t cloudocker123456/java-web-app-docker-k8s ."
    }
    stage('docker push imagetodockerhub'){
        withCredentials([string(credentialsId: 'DOCKERHUB_cred', variable: 'DOCKERHUB')]) {
            sh "docker login -u cloudocker123456 -p ${DOCKERHUB}"
        }
        sh "docker push cloudocker123456/java-web-app-docker-k8s"
     }
     stage('deploy to k8s'){
         sh "kubectl apply -f javawebapp-deployment.yml"
         
     }
}
------------------------------------
node {
    properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])
    echo "jenkins build is : ${env.BUILD_NUMBER}"
    echo "jenkins build name is : ${env.JOB_NAME}"
    echo "jenkins home dir is : ${JENKINS_HOME}"
    def mavenHome = tool name: "Maven3.9.0"
    try{
    slackNotifications('STARTED')    
    stage('git checkout'){
        git credentialsId: 'github-jenkins', url: 'https://github.com/cloudtechnoli/maven-web-application.git'
    }
    stage('build'){
        sh "${mavenHome}/bin/mvn clean package"
    }
    stage('checkcodequality'){
        sh "${mavenHome}/bin/mvn clean sonar:sonar"
    }
    stage('sourcecodedeploytoArtificatory'){
        sh "${mavenHome}/bin/mvn clean deploy"
    }
    stage('deploy to tomcat'){
        sshagent(['tomcatjekins']){
         sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.14.100:/opt/tomcat/webapps/"
     }
    }
  }//end try
  catch(e){
  currentBuild.result="FAILURE"
  throw e
  }//catch closing
  finally{
  slackNotifications(currentBuild.result)
  }
 } //Node closing
 
 def slackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'
  //buildStatus = buildStatus ? "SUCCESS":"FAILURE"

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    colorName = 'ORANGE'
    colorCode = '#FFA500'
  } else if (buildStatus == 'SUCCESS') {
    colorName = 'GREEN'
    colorCode = '#00FF00'
  } else {
    colorName = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: "#scriptpipeline")
}
---------------------------------------------------------------
pipeline {
    agent any
    tools {
      maven 'Maven3.9.0'
    }
    triggers {
    pollSCM '* * * * *'
    }
    options {
    timestamps()
    buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
    }
    stages{
        stage('scm checkout'){
            steps {
                sendSlackNotifications("STARTED")
                git credentialsId: 'github-jenkins', url: 'https://github.com/cloudtechnoli/maven-web-application.git'
            }
        }
        stage('build'){
            steps {
                sh 'mvn clean package'
            }
        }
        stage('execute sonarqube report') {
            steps {
                sh 'mvn clean sonar:sonar'
            }
        }
        stage('upload artifacts to nexus') {
            steps {
                sh 'mvn clean deploy'
            }
        }
        stage('deploy to tomcat') {
            steps {
             sshagent(['tomcatjekins']){
         sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.14.100:/opt/tomcat/webapps/"
             }
          }     
    }
  }
  post {
  success {
    sendSlackNotifications(currentBuild.result)
  }
  failure {
    sendSlackNotifications(currentBuild.result)
  }
}
}
//send slack notification
def sendSlackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'
  //buildStatus = buildStatus ? "SUCCESS":"FAILURE"

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    colorName = 'ORANGE'
    colorCode = '#FFA500'
  } else if (buildStatus == 'SUCCESS') {
    colorName = 'GREEN'
    colorCode = '#00FF00'
  } else {
    colorName = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: "#scriptpipeline")
}
------------------------
